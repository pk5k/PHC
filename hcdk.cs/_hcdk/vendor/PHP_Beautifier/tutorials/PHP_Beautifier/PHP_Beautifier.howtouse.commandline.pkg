<refentry id="{@id}">
  <refnamediv>
    <refname>Command Line use</refname>
    <refpurpose>Instructions and examples of using the command line</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <refsynopsisdivinfo>
      <author>
        <firstname>Claudio</firstname>
        <surname>Bustos</surname>
        <email>cdx@users.sourceforge.com</email>
      </author>
      <author>
        <firstname>Jens</firstname>
        <surname>Bierkandt</surname>
        <email>scortch@users.sourceforge.com</email>
      </author>
    </refsynopsisdivinfo>
    <synopsis></synopsis>
  </refsynopsisdiv>
{@toc}
<refsect1 id="{@id location}">
        <title>Locate the script</title>
    <para>First, you should know where the script resides. The Pear installer puts the script on the PHP binary directory or in PHP_PEAR_BIN_DIR if defined. So, in linux, the script <command>php_beautifier</command> is included in the path of executables (/usr/bin/php_beautifier). On Windows, a batch file called <command>php_beautifier.bat</command> is created as a wrapper for php_beautifier</para>
  </refsect1>
  <refsect1 id="{@id windows}">
    <title>Running the command-line in MS Windows</title>
    <para>First, put the path where resides the php_beautifier.bat executable on <varname>PATH</varname>, and type on a console window :</para>
    <screen>
<![CDATA[
c:\>php_beautifier [commandline]
]]>
     </screen>
  </refsect1>
  <refsect1 id="{@id linux}">
    <title>Running the command-line in Linux</title>
    <para>
By default, the script is located in the path of executables, with execute permitions, so you only have to type:</para>
    <screen>
<![CDATA[
$ php_beautifier [commandline]
]]>
     </screen>
  </refsect1>
  <refsect1 id="{@id command}">
  <note>NOTE: Use the short options. Console_Getopt doesn't works well with long options</note>
    <title>Command line options and parameters</title>
    <refsect2 id="{@id command_usage}">
      <title>Usage</title>
      <synopsis>
        <command>php_beautifier</command>
        <optional>-f <replaceable>input_path</replaceable>
        </optional>
        <optional>-o <replaceable>output_path</replaceable>
        </optional>
        <optional>-c <replaceable>compression_type</replaceable>
        </optional>        
        <optional>-t <optional><replaceable>number</replaceable>
          </optional>
        </optional>
        <optional>-s <optional><replaceable>number</replaceable>
          </optional>
        </optional>
        <optional>-l <replaceable>filter_def</replaceable>
        </optional>
        <optional>-d <replaceable>path</replaceable>
        </optional>
        <optional>-r </optional>
        <optional>-? </optional>
        <optional>
          <replaceable>input_path...</replaceable>
          <optional>
            <replaceable>output_path</replaceable>
          </optional>
        </optional>
      </synopsis>
      <variablelist>
        <varlistentry>
          <term>input_path</term>
          <listitem role="varlistentry">
            <para>File name(s) (allowed * and ? for batch processing) or <command>-</command> for STDIN.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>output_path</term>
          <listitem role="varlistentry">
            <para>Path to a dir (with '/' at the end), to a single file (without the '/')  or <command>-</command> for STDOUT</para>
          </listitem>
        </varlistentry>
        <varlistentry>
        <term>compress_type</term>
        <listitem role="varlistentry">
        <para>Set compression. Modes can be 'gz' (default) and 'bz2'</para>
        </listitem>
        </varlistentry>
        <varlistentry>
          <term>filter_def</term>
          <listitem role="varlistentry">
            <synopsis>"<replaceable>FilterName</replaceable>
              <optional>(<optional><replaceable>param</replaceable>=<replaceable>value</replaceable>
                  <optional>, <replaceable>param</replaceable>=<replaceable>value</replaceable>...</optional>
                  <optional> &nbsp;<replaceable>FilterName...</replaceable>
                  </optional>
                </optional>)</optional>"</synopsis>
            <para>The name of the filter should be written in StudlyCaps. The settings are inside the parenthesis, separated by commas; the value is preceded by '='. Other Filter could be added, separated by spaces.</para>
          </listitem>
        </varlistentry>

      </variablelist>
      <caution>
        <para>The default input/output of the tool are STDIN/STDOUT. So, don't be surprise if nothing happens when you call the tool without any options!</para>
      </caution>
    </refsect2>
    <refsect2 id="{@id options}">
      <title>Options</title>
      <table frame="all" id="{@id summary}" align="center">
        <title>Command-line options</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>short option</entry>
              <entry>long option</entry>
              <entry>description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>-f</entry>
              <entry>--input</entry>
              <entry>input path</entry>
            </row>
            <row>
              <entry>-o</entry>
              <entry>--output</entry>
              <entry>output path</entry>
            </row>
            <row>
              <entry>-c</entry>
              <entry>--compress</entry>
              <entry>Compress the output ('tz','bz2')</entry>
            </row>            
            <row>
              <entry>-t</entry>
              <entry>--indent_tabs</entry>
              <entry>Indent with tabs </entry>
            </row>
            <row>
              <entry>-s</entry>
              <entry>--indent_spaces</entry>
              <entry>Indent with spaces </entry>
            </row>
            <row>
              <entry>-l</entry>
              <entry>--filters</entry>
              <entry>Add one or more filters</entry>
            </row>
            <row>
              <entry>-d</entry>
              <entry>--directory_filters</entry>
              <entry>Add a filters directory.</entry>
            </row>
            <row>
              <entry>-r</entry>
              <entry>--recursive</entry>
              <entry>Turn on recursive mode</entry>
            </row>
            <row>
              <entry>-?</entry>
              <entry>--help</entry>
              <entry>Display help / usage </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    <refsect3 id="{@id input}">
    <title>--input</title>
    <para>Set the input pattern for beautify. * and ? are allowed for batch processing. If recursive mode (<option>-r</option>) is turned on, the pattern may catch directory names. <option>-</option> get input from standard input</para>
    </refsect3>
    <refsect3 id="{@id output}">
    <title>--output</title>
    <para>Set the output for beautify. If the param ends in '/' and the input matches one or more files, the program try to recreate the input directory structure. If the param doesn't end in '/', the output will be one file. <option>-</option> set the output to standard output</para>
    </refsect3>
    <refsect3 id="{@id compress}">
    <title>--compress</title>
    <para>Set compression for output file(s). You can select 'gz' or 'bz2'. If output is a dir, all the files are compressed separately!</para>
    </refsect3>

    <refsect3 id="{@id indent-tabs}">
    <title>--indent_tabs</title>
    <para>Tabs are used as indent char. Without a param, the number of tabs for indent is 1</para>
    </refsect3>
        <refsect3 id="{@id indent-spaces}">
    <title>--indent_spaces</title>
    <para>Spaces are used as indent char. Without a param, the number of spaces for indent is 4</para>
    </refsect3>
    <refsect3 id="{@id filters}">
    <title>--filters</title>
    <para>Add one or more filters to the process. Look on {@tutorial PHP_Beautifier.howtouse.commandline.pkg#command.command_usage} the definition for the command</para>
    <screen>
<![CDATA[
$ php_beautifier --filters "ArrayNested Pear(add_header=php)"
]]>
     </screen>
    </refsect3>
    <refsect3 id="{@id filters-directory}">
    <title>--directory_filters</title>
    <para>Add a path to lookup for filters. See {@link PHP_Beautifier::addFilterDirectory()}.</para>
    </refsect3>
    <refsect3 id="{@id recursive}">
    <title>--recursive</title>
    <para>Turn on the recursive search for files inside directories. On *nix, remember to quote the input_path</para>
    </refsect3>
    <refsect3 id="{@id help}">
    <title>--help</title>
    <para>Show the help / usage.</para>
    </refsect3>    
    </refsect2>
  </refsect1>
  <refsect1 id="{@id examples}">
  <title>Examples</title>
  <para>We have this files structure. Current directory is /myprogam/</para>
  <screen>
  <![CDATA[
  /myprogram/index.php
  /myprogram/file1.php
  /myprogram/file2.php
  /myprogram/lib/lib.php
  /myprogram/lib/lib1.php
  /myprogram/lib/lib2.php
  ]]>
  </screen>
  <refsect2 id="{@id testone}">
  <title>Test beautify (for one file)</title>
  <para>Send the output to STDOUT</para>
  <screen>
  <![CDATA[
  php_beautifier index.php
  ]]>
  </screen>
  </refsect2>
  <refsect2 id="{@id testmore}">
  <title>Test beautify (for multiple files)</title>
  <para>This match only the files inside /myprogram/ . The output is send to STDOUT</para>
  <screen>
  <![CDATA[
  php_beautifier *.php
  on *nix
  php_beautifier "*.php"
  ]]>
  </screen>
  <para>This match all the files inside /myprogram/ and /myprogram/lib . The output is send to STDOUT</para>
  <screen>
  <![CDATA[
  php_beautifier -r "*.php"
  ]]>
  </screen>
  </refsect2>
<refsect2 id="{@id indent}">
  <title>Define tabs or spaces to indent</title>
  <para>This create a new file with 2 spaces for indentation</para>
  <screen>
  <![CDATA[
  php_beautifier -s2 index.php index_new.php
  ]]>
  </screen>
  <para>This create a new file with 2 tabs for indentation</para>
  <screen>
  <![CDATA[
  php_beautifier -t2 index.php index_new.php
  ]]>
  </screen>
  </refsect2>
<refsect2 id="{@id filters}">
  <title>Use Filters</title>
  <para>Use PEAR standards</para>
  <screen>
  <![CDATA[
  php_beautifier -l "Pear()" index.php index_pear.php
  ]]>
  </screen>
  <para>Use PEAR standards, add Apache license, nest arrays and list the functions and classes of file</para>
  <screen>
  <![CDATA[
  php_beautifier -l "Pear(add_header=apache) ArrayNested() ListClassFunction()" index.php index_new.php
  ]]>
  </screen>
  </refsect2>
<refsect2 id="{@id multiple}">
  <title>Handling multiple files</title>
  <para>Beautify all the files and send the output to one file</para>
  <screen>
  <![CDATA[
  php_beautifier -r "*.php" all_files.txt
  ]]>
  </screen>
  <para>Beautify all files and recreate the dir structure on ./myprogram-beautified/</para>
  <screen>
  <![CDATA[
  php_beautifier -r "*.php" ./myprogram-beautified/
  ]]>
  </screen>
  </refsect2>
  </refsect1>
</refentry>
