<refentry id="{@id}">
  <refnamediv>
    <refname>Callbacks</refname>
    <refpurpose>Describe how the file to beautify can alter the beautify process</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <refsynopsisdivinfo>
      <author>
        <firstname>Claudio</firstname>
        <surname>Bustos</surname>
        <email>cdx@users.sourceforge.com</email>
      </author>
      <author>
        <firstname>Jens</firstname>
        <surname>Bierkandt</surname>
        <email>scortch@users.sourceforge.com</email>
      </author>
    </refsynopsisdivinfo>
    <synopsis></synopsis>
  </refsynopsisdiv>
{@toc}
<refsect1 id="{@id intro}">
<title>Introduction</title>
<para>One of the nicest features of Php_Beautifier is the use of callbacks inside the code to beautify. This callbacks call a method on the base class or in a filter.</para>
</refsect1>
<refsect1 id="{@id commentusage}">
<title>Usage</title>
<para>To execute a callback, you should insert a short comment, with this structure</para>
<itemizedlist>
<listitem><para><command>Php_Beautifier</command> or the name of the filter (case insensitive)</para></listitem>
<listitem><para>-&gt;</para></listitem>
<listitem><para>Method name and params inside parenthesis. Php_Beautifier evaluates all after '-&gt;', so the code must be valid PHP code</para></listitem>
</itemizedlist>
<programlisting role="php">
<![CDATA[
// php_beautifier->setBeautify(true);
echo "This line will be beautified";
// ArrayNested->on()
echo "Array Nested!";
]]>
</programlisting>
</refsect1>
<refsect1 id="{@id methods}">
<title>Common methods</title>
<refsect2 id="{@id base}">
<title>Base class</title>
<para>You can use only the public method that starts with 'add' and 'set', except {@link PHP_Beautifier::setInputFile()} and {@link PHP_Beautifier::setOutputFile()}</para>
<itemizedlist>
<listitem><para>{@link PHP_Beautifier::setBeautify()}</para></listitem>
<listitem><para>{@link PHP_Beautifier::setIndentChar()}</para></listitem>
<listitem><para>{@link PHP_Beautifier::setIndentNumber()}</para></listitem>
<listitem><para>{@link PHP_Beautifier::setNewLine()}</para></listitem>
<listitem><para>{@link PHP_Beautifier::addFilter()}</para></listitem>
<listitem><para>{@link PHP_Beautifier::addFilterDirectory()}</para></listitem>
</itemizedlist>
</refsect2>
<refsect2 id="{@id filters}">
<title>Filters</title>
<itemizedlist>
<listitem><para>{@link PHP_Beautifier_Filter::on()}</para></listitem>
<listitem><para>{@link PHP_Beautifier_Filter::off()}</para></listitem>
<listitem><para>{@link PHP_Beautifier_Filter::setSetting()}</para></listitem>
</itemizedlist>
</refsect2>
</refsect1>
<refsect1 id="{@id demo}">
<title>Demostration</title>
<para>With this code to beautify</para>
<programlisting role="php">
<![CDATA[
<?php
$a=array('1',array('1.1','1.2','1.3'));
// php_beautifier->addFilter('ArrayNested');
$a=array('1',array('1.1','1.2','1.3'));
// php_beautifier->setIndentNumber(2);
echo 'Indent: 2 spaces';
// php_beautifier->setIndentNumber(10);
echo 'Indent: 10 spaces';
// php_beautifier->setBeautify(false);
echo "The following lines won't be beautified";
$a=array('1',array('1.1','1.2','1.3'));
if ($b) {$c;} else {$d;}
// php_beautifier->setBeautify(true);
// php_beautifier->setIndentNumber(4);
echo 'Beautify, again';
// now, turn out the Filter
// ArrayNested->off()
$a=array('1',array('1.1','1.2','1.3'));
// ArrayNested->on()
$a=array('1',array('1.1','1.2','1.3'));
?>
]]>
</programlisting>
<para>With the defaults settings we obtain</para>
<programlisting role="php">
<![CDATA[
<?php
    $a = array('1', array('1.1', '1.2', '1.3'));
    // php_beautifier->addFilter('ArrayNested');
    $a = array(
        '1',
        array(
            '1.1',
            '1.2',
            '1.3'
        )
    );
    // php_beautifier->setIndentNumber(2);
  echo 'Indent: 2 spaces';
  // php_beautifier->setIndentNumber(10);
          echo 'Indent: 10 spaces';
          // php_beautifier->setBeautify(false);
echo "The following lines won't be beautified";
$a=array('1',array('1.1','1.2','1.3'));
if ($b) {$c;} else {$d;}
// php_beautifier->setBeautify(true);
          // php_beautifier->setIndentNumber(4);
    echo 'Beautify, again';
    // now, turn out the Filter
    // ArrayNested->off()
    $a = array('1', array('1.1', '1.2', '1.3'));
    // ArrayNested->on()
    $a = array(
        '1',
        array(
            '1.1',
            '1.2',
            '1.3'
        )
    );
?>
]]>
</programlisting>
</refsect1>
<refsect1 id="{@id moreinfo}">
<title>More information</title>
<para>See {@link PHP_Beautifier::controlToken()}</para>
</refsect1>
</refentry>
