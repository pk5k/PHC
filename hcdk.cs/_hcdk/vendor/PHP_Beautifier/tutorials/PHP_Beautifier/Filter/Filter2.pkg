<refentry id="{@id}">
 <refnamediv>
  <refname>Filter architecture</refname>
  <refpurpose>How Filters works and how to use them</refpurpose>
 </refnamediv>
<refsynopsisdiv>
<refsynopsisdivinfo>
 <author>
  <firstname>Claudio</firstname>
    <surname>Bustos</surname>
   <email>cdx@users.sourceforge.com</email>
  </author>
  <author>
  <firstname>Jens</firstname>
    <surname>Bierkandt</surname>
   <email>scortch@users.sourceforge.com</email>
  </author>
  </refsynopsisdivinfo>
  <synopsis></synopsis>
</refsynopsisdiv>
{@toc}
 <refsect1 id="{@id intro}">
  <title>Filters architecture</title>
	<para>
	PHP_Beautifier class tokenize the script, send the tokens to the Filters and, finally, create some type of output. All the beautify process are made by the Filters.
	</para>
	<para>
	The Filters are managed as a stack in LIFO order (Last In, First Out). If the first Filter doesn't have a method to process the token or send a bypass signal, the second one is called and so on. The last filter ({@link PHP_Beautifier_Filter_Default}) is included by default and send the token unchanged if doesn't have a method to handle it.
	</para>
	<para>
	The Filters have the option to made changes to the output at the end of the processing, using the method {@link PHP_Beautifier_Filter::postProcessing()}
	</para>
 </refsect1>
 <refsect1 id="{@id use}">
 <title>Use filters</title>
 <refsect2 id="{@id general}">
 <title>General</title>
 <para>The default Filter and the standard ones resides in {install_dir}/Filter. The name of the file for each filter is '{FILTER_NAME}.filter.php' and the names of class is 'PHP_Beautifier_Filter_{FILTER_NAME}'. Look the source code of {@link PHP_Beautifier_Filter_Default} for an example.</para>
 <para>You can create your own filters and include they on the default dir. If you use another directory to the Filters, read the next sections to handle this</para>
 </refsect2>
 <refsect2 id="{@id class}">
 <title>Use with PHP_Beautifier class</title>
<para>You can create new Filters in others directorys than the default. Use {@link PHP_Beautifier::addFilterDirectory()}</para>
<para>To add a Filter, use {@link PHP_Beautifier::addFilter()}</para>
</refsect2>
<refsect2 id="{@id command_line}">
 <title>Use with command line</title>
<para>In the command line, you can add Filter using the --filters or -l options. The Filters are separated by spaces and if they accept arguments, they are separated by commas. Remember to quote the complete definition inside double quotes.
</para>
<para>See {@tutorial  PHP_Beautifier/PHP_Beautifier.howtouse.commandline.pkg#command.command_usage}</para>
<screen>
<title>Example</title>
<![CDATA[
beautifier_php --filters "Pear(add_header=>php) ArrayNested"
]]>
</screen>
</refsect2>
<refsect2 id="{@id web_frontend}">
<title>Use with Web Frontend</title>
<para><emphasis>TODO</emphasis></para>
</refsect2>
 </refsect1>
</refentry>